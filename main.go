// main.go
package main

import (
	"context"
	"github.com/ItaiHalperin/Device-Rec-API/api"
	_ "github.com/ItaiHalperin/Device-Rec-API/docs" // docs is generated by Swag CLI
	"github.com/gin-gonic/gin"
	"github.com/swaggo/files"
	"github.com/swaggo/gin-swagger"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"
)

func main() {
	quit := make(chan os.Signal, 1)
	service := &api.ServerCtrl{ServerShutdownChannel: quit}
	// Create a new Gin router
	router := gin.Default()

	// Swagger documentation route
	router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	// api routes
	v1 := router.Group("/api/v1")
	{
		v1.GET("/ping", api.Ping)                       // removed trailing slash
		v1.GET("/user/:id", api.GetUser)                // already correct
		v1.GET("/launchProcess", service.LaunchProcess) // removed trailing slash
		v1.GET("/resetDatabase", api.ResetDatabase)     // removed trailing slash and fixed case
		v1.GET("/top-devices", api.TopDevices)          // removed trailing slash and fixed case
	}

	srv := &http.Server{
		Addr:    ":8080",
		Handler: router,
	}

	go func() {
		if err := srv.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			log.Printf("HTTP server error: %v", err)
		}
	}()
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)

	<-quit
	close(quit)
	log.Println("Shutting down server...")

	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	if err := srv.Shutdown(ctx); err != nil {
		log.Printf("Server shutdown error: %v", err)
	}

	log.Println("Server exiting")
}
